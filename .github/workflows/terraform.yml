# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Install Edge Orchestrator'

on:
  workflow_dispatch:
    
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Copy Service Account Secret to provisioning Directory
    - name: Create Service Account Json File
      working-directory: ./install-scripts/provisioning
      run: touch service-account.json
      
    # Copy Service Account Secret to provisioning Directory
    - name: Copy Secret to Service Account Json File
      working-directory: ./install-scripts/provisioning
      run: echo '${{ secrets.GCE_SERVICE_ACCOUNT }}' >> service-account.json
      
    - name: Format Terraform Files
      working-directory: ./install-scripts/provisioning
      run: terraform fmt

    # Move Public Key for current User
    - name: Create Public Key
      run: |
        mkdir ~/.ssh
        touch ~/.ssh/id_rsa.pub
        echo '${{ secrets.PUBLIC_KEY }}' >> ~/.ssh/id_rsa.pub

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./install-scripts/provisioning
      run: terraform init
    
#    - name: Terraform Destroy
#      working-directory: ./install-scripts/provisioning
#      run: ./destroy.sh

    - name: Terraform Apply
      working-directory: ./install-scripts/provisioning
      run: terraform apply -var-file tfvars.json -state cluster.tfstate -auto-approve
    
    - name: Verify
      working-directory: ./install-scripts/provisioning
      run: cat cluster.tfstate
    
    - name: Verify
      working-directory: ./install-scripts/provisioning
      run: cat cluster.tfstate
  
    - name: Generate Inventory File
      continue-on-error: true
      working-directory: ./install-scripts/provisioning
      run: bash ./generate-inventory.sh cluster.tfstate > ../hosts.ini
    
